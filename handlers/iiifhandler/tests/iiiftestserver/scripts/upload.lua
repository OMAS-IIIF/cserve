---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by rosenth.
--- DateTime: 11.07.21 19:16
---
function __send_error(msg)
    server.print(msg)
    server.log(msg, server.loglevel.LOG_ERR)
    server.sendStatus(500)
    return false
end

local filesize
local origname
local mimetype
local cnt = 0
local fpath

local myimg = {}
local newfilename = {}
local iiifurls = {}

if server.secure then
    protocol = 'https://'
else
    protocol = 'http://'
end

for fileindex, fileinfo in pairs(server.uploads) do
    filesize = fileinfo.filesize
    origname = fileinfo.origname
    mimetype = fileinfo.mimetype

    local success, consistency
    success, consistency = server.file_mimeconsistency(fileindex)
    if not success then
        return send_error(500, consistency)
    end

    if not consistency then
        local mimetypeobj
        success, mimetypeobj = server.file_mimetype(imgindex)
        if not success then
            server.log("Couldn't determine mimetype!", server.loglevel.error)
            send_error(500, mimetypeobj)
            return false
        end
        mimetype = mimetypeobj.mimetype
    else
        mimetype = fileinfo["mimetype"]
    end

    if mimetype == "image/tiff" or mimetype == "image/jpeg" or mimetype == "image/png" or mimetype == "image/jpx" or mimetype == "image/jp2" then
        success, myimg[imgindex] = SipiImage.new(imgindex)
        if not success then
            server.log(myimg[imgindex], server.loglevel.error)
            send_error(500, myimg[imgindex])
            return false
        end

        local uuid62
        success, uuid62 = server.uuid62()
        if not success then
            server.log(uuid62, server.loglevel.error)
            send_error(500, uuid62)
            return false
        end

        filename = fileinfo["origname"]
        filebody = filename:match("(.+)%..+")
        newfilename[imgindex] = "_" .. filebody .. '.jp2'
        iiifurls[uuid62 .. ".jp2"] = protocol .. server.host .. '/iiif/' .. newfilename[imgindex]
        iiifurls["filename"] = newfilename[imgindex]

        --
        -- Set orientation to topleft
        --
        myimg[imgindex]:topleft()

        --
        -- Create the destination path
        --
        fullfilepath = config.imgroot .. '/' .. newfilepath

        --
        -- write the file to the destination
        --
        local status, errmsg = myimg[imgindex]:write(fullfilepath)
        if not status then
            server.print('Error converting image to j2k: ', filename, ' ** ', errmsg)
        end
    else
        fpath = config.imgroot .. '/' .. fileinfo.origname
        success, errmsg = server.copyTmpfile(fileindex, fpath)
        if not success then
            return send_error(errmsg)
        end

    end

    cnt = cnt + 1
end

result = {
    status = 'OK',
    cnt = cnt,
    origname = origname,
    mimetype = mimetype,
    filesize = filesize,
    consistency = consistency
}
local success, jsonresult = server.table_to_json(result)

--
-- remove uploaded file
--
success, errmsg = server.fs.unlink(fpath)
if not success then
    return send_error(errmsg)
end

if not success then
    server.log("server.table_to_json fail
    ed: " .. errmsg, server.loglevel.LOG_ERR)
    server.sendStatus(500)
    print.print("server.table_to_json failed: " .. errmsg)
    return false
end
server.sendHeader('Content-type', 'application/json')
server.sendStatus(200)
server.print(jsonresult)
return true
